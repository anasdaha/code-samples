{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'Stats__item'
  ]
%}


{% block paragraph %}
  <div {{ attributes.addClass(classes) }} id="paragraph-{{paragraph.id()}}">
    <div class="Stats__icon">
      {% if content.field_svg_icon|render %}
        {{ content.field_svg_icon }}
      {% else %}
        {{ content.field_m_image }}
      {% endif %}
    </div>
    <div class="Stats__shadow">
      <div class="Stats__interior">
        <div class="Stats__value">
          {% if content.field_before_first_number|render %}
            {{ content.field_before_first_number|render|striptags }}
          {% endif %}
          {% if content.field_stat_first_number|render %}
            <span data-count="{{ content.field_stat_first_number|render|striptags|trim }}" data-count-start="100">{{ content.field_stat_first_number|render|striptags|trim }}</span>
          {% endif %}
          {% if content.field_stat_first_number|render and content.field_stat_second_number|render %}
            :
          {% endif %}
          {% if content.field_stat_second_number|render %}
            {{ content.field_stat_second_number|render|striptags|trim }}
          {% endif %}
          {% if content.field_after_second_number|render %}
            {{ content.field_after_second_number|render|striptags }}
          {% endif %}
        </div>
      <div class="Stats__content flush">
        {% if content.field_p_title|render %}
          <h3 class="Stats__title h6">{{ content.field_p_title|render }}</h3>
        {% endif %}
        {% if content.field_description|render %}
          {{ content.field_description|render }}
        {% endif %}
        </div>
      </div>
    </div>
  </div>
{% endblock paragraph %}
