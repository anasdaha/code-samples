{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'RouterTabs',
    'RouterTabs--full'
  ]
%}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }} id="collapse-item-{{paragraph.id()}}">
    {% block content %}
    {% if content.field_media_images|render %}
      <script>
        // Array of image sources
        const images = [
          {% for key, item in content.field_media_images['#items'] %}
            {% if item.entity.field_media_image is not empty %}
              '{{ file_url(item.entity.field_media_image.entity.uri.value) }}',
            {% endif %}
          {% endfor %}
        ];
        // Function to load a random image
        function loadRandomImage() {
          const imgElement = document.getElementById('randomImageTab');
          if (imgElement) {  // Null check
            const randomIndex = Math.floor(Math.random() * images.length);
            imgElement.src = images[randomIndex];
          }
        }
        
        window.addEventListener('load', function () {
          loadRandomImage();
        });
      </script>
    {% endif %}
      <div class="RouterTabs__main"> 
        <div class="RouterTabs__content zero image-overlay">
          {% if content.field_media_images|render %}
            <img id="randomImageTab" src="{{ file_url(content.field_media_images['#items'][0].entity.field_media_image.entity.uri.value) }}" alt="Random Image">
          {% endif %}
          {% if content.field_caption|render %}
            <div class="RouterTabs__content-caption">
              {{ content.field_caption }}
            </div>
          {% endif %}
        </div> 
        <div class="RouterTabs__header zero">
          {% if content.field_title|render %}
            {% if content.field_title_tag|render %}
              {% set tag = content.field_title_tag|render|striptags|trim %}
            {% else %}
              {% set tag = 'h2' %}
            {% endif %}
            <{{tag}} class="cta-heading">{{ content.field_title|render|striptags|trim|raw }}</{{tag}}> 
          {% endif %}
          {% if content.field_description|render %}
            <div class="RouterTabs__desc">
              {{content.field_description}}
            </div>
          {% endif %}
        </div>
        {% if content.field_links_list|render %}
          <div class="RouterTabs__columns">
            {% for item in content.field_links_list['#items']  %}
              <a href="{{ item.url }}" class="RouterTabs__button link-underline">{{ item.value.title }}</a>
            {% endfor %}
          </div>
        {% endif %}
        {% if content.field_cta|render %}
          <a href="{{ content.field_cta[0]['#url'] }}" class="Button Button--a11y"><span>{{ content.field_cta[0]['#title'] }}</span></a>  
        {% endif %}
      </div>
      {% endblock %}
    </div>
{% endblock paragraph %}
