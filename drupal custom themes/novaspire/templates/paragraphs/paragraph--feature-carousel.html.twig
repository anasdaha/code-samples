{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'container',
    'space',
    'flush',
    'bg-navy'
  ]
%}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }} id="collapse-item-{{paragraph.id()}}">
    {% block content %}
    <div class="ToggleCarousel">
      <div class="ToggleCarousel__sliders">
        <div class="block">
          {% if content.field_title|render %}
            {% if content.field_title_tag|render %}
              {% set tag = content.field_title_tag|render|striptags|trim %}
            {% else %}
              {% set tag = 'h2' %}
            {% endif %}
            <{{tag}} class="ToggleCarousel__title" data-animate data-animation="fade-in-down">{{ content.field_title|render|striptags|trim|raw }}</{{tag}}>
          {% endif %}
          <div class="ToggleCarousel__header" data-animate data-animation="fade-in-up">
            <div>
              {{content.field_description|render}}
            </div>
            <div>
              <div class="ToggleCarousel__tabs">
                {% if content.field_carousel_tabs|render %}
                  {% for key, item in content.field_carousel_tabs['#items'] %}
                    <button class="ToggleCarousel__toggle" 
                      {% if key == 0 %} data-active {% endif %}
                    >{{ content.field_carousel_tabs[key]['#paragraph'].field_title.value|raw }}</button>
                  {% endfor %}
                {% endif %}
              </div>
            </div>
          </div>
        </div>
        {% if content.field_carousel_tabs|render %}
          {% for key, item in content.field_carousel_tabs['#items'] %}
            <div class="ToggleCarousel__slider"
            {% if key == 0 %} data-active {% endif %}
            >
              <div class="slider">
                {% for referenced_slide in content.field_carousel_tabs[key]['#paragraph'].field_carousel_slides %}
                  <div class="ToggleCarousel__item">
                    <figure class="Media">
                      {% if referenced_slide.entity.field_media_image.entity.field_media_image is not empty %}
                        <div class="Media__image">
                          <img src="{{ file_url(referenced_slide.entity.field_media_image.entity.field_media_image.entity.uri.value) }}" alt="{{ referenced_slide.entity.field_media_image.entity.field_media_image.alt}}"> 
                        </div>
                      {% endif %}
                      {% if referenced_slide.entity.field_caption.value|render %}
                        <figcaption class="image__caption flush">
                          {{ referenced_slide.entity.field_caption.value|raw }}
                        </figcaption>
                      {% endif %}
                    </figure>
                  </div>
                {% endfor %}
              </div>
              <span class="flickity-status"></span>
            </div>
          {% endfor %}
        {% endif %}
      </div>
    </div>
  {% endblock %}
  </div>
{% endblock paragraph %}
